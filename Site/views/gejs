#!/usr/bin/perl

# +-----------+-------------------------------------------------------
# | Libraries |
# +-----------+

use Getopt::Long;

# +---------+---------------------------------------------------------
# | Globals |
# +---------+

# The program name.  (Used in error messages.)
my $program = "gejs";
# The template for building ejs files.
my $template = "template.ejs";
# The place where output goes.  Set to nothing for stdout.
my $outfile = "";
# Do we take input from stding?
my $stdin = "";
# Where the input comes from
my $in = STDIN;
# Where the output goes
my $out = STDOUT;
# One line of input
my $line;
# The filehandle for the template
my $tp;

# +------+------------------------------------------------------------
# | Main |
# +------+

# Generate the command
my $command = "$program " . join(' ',@ARGV);

# Get the options
GetOptions ("template=s" => \$template,
            "outfile=s" => \$outfile,
            "" => \$stdin)
or die("$program: error in command line arguments\n");

# Grab the input
if ($stdin) {
  if ($#ARGV != -1) {
    die("$program: Cannot use stdin and inputfile.");
  }
}
elsif ($#ARGV < 0) {
  die("$program: No input file specified.");
}
elsif ($#ARGV > 0) {
  die("$program only supports one input file.");
}
else {
  my $infile = $ARGV[0];
  if (! -f $infile) {
    die("$program: input file $infile does not exist");
  } # If the input file does not exist
  open($in, "<", "$infile") or
    die("$program: could not open $infile");
}

# Make sure that the template exists.
if (! -f $template) {
  die("$program: template file $template does not exist");
}

# Prepare the output
if ($outfile) {
  open($out, ">", $outfile);
} # if $outfile

# Print a short header
print $out <<"HEADER";
<!--
  This file was automatically generated by $program.  Please do not
  edit it directly.

  The command used to generate this file was
    $command
 -->
HEADER

# Run through the file
my $entry = 0;
my $data = "";
my %entries;

while ($line = <$in>) {
  # Check if the line seems to represent a new entry
  if ($line =~ m/^[a-zA-z]/) {
    if ($entry) {
      $entries{$entry} = $data;
      $data = "";
    } # if
    chomp($line);
    $entry = $line;
  } # if the line represents a new entry
  else {
    $data .= $line;
  } # 
} # while
if ($entry) {
  $entries{$entry} = $data;
}
if (!$stdin) {
  close($infile);
}

# Print the template
open($tp, "<", "$template");
while ($line = <$tp>) {
  $line =~ s/<:([^:]*):>/field($1,"","")/ge;
  $line =~ s/<:([^:]*):([^:]*):([^:]*):>/field($1,$2,$3)/ge;
  print $out $line;
} # while

if ($outfile) {
  close($out);
}

# +---------+---------------------------------------------------------
# | Helpers |
# +---------+

sub field($$$) {
  my $name = shift;
  my $pre = shift;
  my $post = shift;
  my $val = $entries{$name};
  if ($val) {
    return "$pre$val$post";
  }
  else {
    return "";
  }
} # field
